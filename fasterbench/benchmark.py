"""Benchmark module"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/benchmark.ipynb.

# %% ../nbs/benchmark.ipynb 2
from __future__ import annotations

import torch
from typing import Sequence, Dict, Any
from .size     import compute_size
from .speed    import compute_speed_multi
from .compute  import compute_compute
from .memory   import compute_memory_multi
from .energy   import compute_energy_multi

# %% auto 0
__all__ = ['benchmark']

# %% ../nbs/benchmark.ipynb 3
def benchmark(
    model: torch.nn.Module,
    sample: torch.Tensor,
    *,
    metrics: Sequence[str] = ("size", "speed", "compute", "memory", "energy"),
    speed_devices: Sequence[str | torch.device] | None = None,
    memory_devices: Sequence[str | torch.device] | None = None,
    energy_devices: Sequence[str | torch.device] | None = None,
    **kwargs,
) -> Dict[str, Any]:

    out: Dict[str, Any] = {}

    if "size" in metrics:
        size_metrics = compute_size(model)
        out.update({f"size_{k}": v for k, v in size_metrics.as_dict().items()})

    if "speed" in metrics:
        speed_dict = compute_speed_multi(model, sample, devices=speed_devices, **kwargs)
        for dev, met in speed_dict.items():
            out.update({f"speed_{dev}_{k}": v for k, v in met.as_dict().items()})

    if "compute" in metrics:
        compute_metrics = compute_compute(model, sample)
        out.update({f"compute_{k}": v for k, v in compute_metrics.as_dict().items()})

    if "memory" in metrics:
        mem_dict = compute_memory_multi(model, sample, devices=memory_devices, **kwargs)
        for dev, met in mem_dict.items():
            out.update({f"memory_{dev}_{k}": v for k, v in met.as_dict().items()})

    if "energy" in metrics:
        ene_dict = compute_energy_multi(model, sample, devices=energy_devices, **kwargs)
        for dev, met in ene_dict.items():
            out.update({f"energy_{dev}_{k}": v for k, v in met.as_dict().items()})

    return out
