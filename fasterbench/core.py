"""Core modules for benchmarking"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/00_core.ipynb 2
import contextlib, warnings
import torch

# %% ../nbs/00_core.ipynb 3
def _bytes_to_mib(n: int) -> float:
    """Helper to convert bytes → MiB (base‑2)"""
    return n / 1024 ** 2

#| export
@contextlib.contextmanager
def _device_ctx(dev: str | torch.device):
    dev = torch.device(dev)
    if dev.type == "cuda" and not torch.cuda.is_available():
        warnings.warn("CUDA requested but not available – falling back to CPU")
        dev = torch.device("cpu")
    yield dev

#| export
def _sync(dev: torch.device):
    if dev.type == "cuda":
        torch.cuda.synchronize(dev)
